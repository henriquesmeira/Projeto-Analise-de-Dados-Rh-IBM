#Git e Github

**An√°lise de Recursos Humanos**

üìñ **Introdu√ß√£o**
A an√°lise de Recursos Humanos (RH) √© o processo de coleta e an√°lise de dados de RH para melhorar o desempenho da for√ßa de trabalho de uma organiza√ß√£o. Esse processo tamb√©m √© conhecido como an√°lise de talentos, an√°lise de pessoas ou an√°lise da for√ßa de trabalho. O objetivo principal √© correlacionar os dados coletados rotineiramente pelo departamento de RH com os objetivos estrat√©gicos e organizacionais, fornecendo evid√™ncias mensur√°veis de como as iniciativas de RH est√£o impactando os resultados da empresa.

Este projeto utiliza um conjunto de dados de uma empresa fict√≠cia para realizar uma an√°lise abrangente, visualizando padr√µes como desligamentos (attrition), sal√°rios, equil√≠brio entre vida profissional e pessoal, e outros fatores.


üõ†Ô∏è **Tecnologias e Bibliotecas Utilizadas**
Este projeto foi desenvolvido em Python e faz uso das seguintes bibliotecas:

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from feature_engine import encoding
from sklearn import tree

üìä **Carregando e Preparando os Dados**
O dataset cont√©m informa√ß√µes sobre os colaboradores, como idade, sal√°rio, tempo de empresa, setor, entre outros. Para carregar os dados em um DataFrame:

df = pd.read_csv("C:/Users/henri/Desktop/IBM/WA_Fn-UseC_-HR-Employee-Attrition.csv

üìã **Exibindo as primeiras linhas do DataFrame**

df.head()

üîÑ **Convertendo Vari√°veis Categ√≥ricas**
Convertendo vari√°veis categ√≥ricas para valores num√©ricos para facilitar o uso em modelos de aprendizado de m√°quina. Um exemplo √© a vari√°vel Attrition, que indica se o colaborador se desligou da empresa:

df['Attrition'] = df['Attrition'].map({'Yes': 1, 'No': 0})
df['WorkLifeBalance'] = df['WorkLifeBalance'].astype('category')


üìà **An√°lise e Visualiza√ß√£o de Dados**
1Ô∏è‚É£ Desligamentos por Idade
A seguir, visualizamos os desligamentos (attrition) por faixa et√°ria:


resig_idade = df.groupby(['Age', 'Attrition']).size().reset_index(name='Count')

plt.figure(figsize=(10, 6))
for attrition in resig_idade['Attrition'].unique():
    subset = resig_idade[resig_idade['Attrition'] == attrition]
    plt.plot(subset['Age'], subset['Count'], label='Attrition' if attrition == 1 else 'No Attrition')
plt.title('Desligamentos de acordo com a idade na organiza√ß√£o')
plt.xlabel('Idade')
plt.ylabel('Contagem')
plt.legend()
plt.grid(True)
plt.show()

![Texto alternativo](C:\Users\henri\Desktop\Dados IBM\Imagens\image_1)

2Ô∏è‚É£ **M√©dia Salarial por Anos de Empresa**
Aqui, analisamos como a m√©dia salarial varia de acordo com o tempo de empresa:

media_salarial = df.groupby('TotalWorkingYears')['MonthlyIncome'].mean().reset_index()

plt.figure(figsize=(8, 6))
plt.plot(media_salarial['TotalWorkingYears'], media_salarial['MonthlyIncome'], marker='o', linestyle='dashed', color='blue')
plt.title('M√©dia Salarial por Anos de Empresa')
plt.xlabel('Anos de Empresa')
plt.ylabel('M√©dia Salarial')
plt.grid(True)
plt.show()

3Ô∏è‚É£ **M√©dia Salarial por Setor e Anos de Empresa**
Para uma an√°lise mais detalhada, visualizamos a m√©dia salarial de acordo com o tempo de empresa, mas desta vez segmentado por setor:


media_salarial_setor_anos = df.groupby(['TotalWorkingYears', 'Department'])['MonthlyIncome'].mean().reset_index()

plt.figure(figsize=(12, 8))
for department in media_salarial_setor_anos['Department'].unique():
    dept_data = media_salarial_setor_anos[media_salarial_setor_anos['Department'] == department]
    plt.plot(dept_data['TotalWorkingYears'], dept_data['MonthlyIncome'], marker='o', linestyle='-', label=department)
plt.title('M√©dia Salarial por Departamento e Anos de Empresa')
plt.xlabel('Anos de Empresa')
plt.ylabel('M√©dia Salarial')
plt.legend(title='Departamento')
plt.grid(True)
plt.show()


4Ô∏è‚É£ **Funcion√°rios Desligados por Setor e Anos de Empresa :**

Agora analisamos os colaboradores que se desligaram da empresa, divididos por setor e tempo de empresa:

desligados = df[df['Attrition'] == 1]
media_salarial_por_anos_setor = desligados.groupby(['TotalWorkingYears', 'Department'])['MonthlyIncome'].count().reset_index()

plt.figure(figsize=(12, 8))
for department in media_salarial_por_anos_setor['Department'].unique():
    dept_data = media_salarial_por_anos_setor[media_salarial_por_anos_setor['Department'] == department]
    plt.plot(dept_data['TotalWorkingYears'], dept_data['MonthlyIncome'], marker='o', linestyle='-', label=department)
plt.title('Contagem de Funcion√°rios Desligados por Anos de Empresa e Departamento')
plt.xlabel('Anos de Empresa')
plt.ylabel('Contagem')
plt.legend(title='Departamento')
plt.grid(True)
plt.xticks(range(int(media_salarial_por_anos_setor['TotalWorkingYears'].min()), int(media_salarial_por_anos_setor['TotalWorkingYears'].max()) + 1))
plt.show()


5Ô∏è‚É£ **Equil√≠brio Vida-Trabalho**
Analisamos agora como o equil√≠brio entre vida pessoal e trabalho se distribui entre colaboradores ativos e desligados:

equilibrio_trab = df.groupby(['WorkLifeBalance', 'Attrition']).size().reset_index(name='Counts')

sns.set(style="whitegrid")
plt.figure(figsize=(10, 6))
sns.barplot(data=equilibrio_trab, x='WorkLifeBalance', y='Counts', hue='Attrition')
plt.title('Equil√≠brio Vida-Trabalho na Organiza√ß√£o')
plt.xlabel('Equil√≠brio Vida-Trabalho')
plt.ylabel('Contagem')
plt.show()


6Ô∏è‚É£ **Taxa de Desligamento por Setor**
Esta an√°lise mostra qual setor tem a maior taxa de desligamentos:

desliga_setor = df.groupby('Department')['Attrition'].sum().reset_index()

plt.figure(figsize=(10, 6))
plt.bar(desliga_setor['Department'], desliga_setor['Attrition'], color='blue')
plt.title('Taxa de Desligamento por Departamento')
plt.xlabel('Departamento')
plt.ylabel('Taxa de Desligamento')
plt.xticks(rotation=45)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()

7Ô∏è‚É£ **Equil√≠brio Vida-Trabalho por Setor**
Finalmente, analisamos o equil√≠brio vida-trabalho m√©dio para cada setor da empresa:


df['WorkLifeBalance'] = pd.to_numeric(df['WorkLifeBalance'], errors='coerce')
work_departament = df.groupby('Department')['WorkLifeBalance'].mean().reset_index()

plt.figure(figsize=(10, 6))
plt.bar(work_departament['Department'], work_departament['WorkLifeBalance'], color='blue')
plt.title('M√©dia de WorkLife Balance por Departamento')
plt.xlabel('Departamento')
plt.ylabel('WorkLife Balance')
plt.xticks(rotation=45)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()

